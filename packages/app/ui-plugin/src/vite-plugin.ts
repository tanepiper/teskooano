import type { Plugin } from 'vite';
import fs from 'fs/promises'; // Use promises for async file reading
import path from 'path';
import {
    ComponentRegistryConfig,
    PluginRegistryConfig,
    ComponentLoadConfig,
    PluginLoadConfig
} from './types.js';

// Define the options our plugin will accept
export interface TeskooanoUiPluginOptions {
  componentRegistryPath: string; // Absolute path to component config
  pluginRegistryPath: string; // Absolute path to plugin config
}

const VIRTUAL_MODULE_ID = 'virtual:teskooano-loaders';
const RESOLVED_VIRTUAL_MODULE_ID = '\0' + VIRTUAL_MODULE_ID; // Vite convention for resolved virtual modules

export function teskooanoUiPlugin(options: TeskooanoUiPluginOptions): Plugin {
  if (!options || !options.componentRegistryPath || !options.pluginRegistryPath) {
    throw new Error('[Teskooano UI Plugin] Missing required options: componentRegistryPath and pluginRegistryPath');
  }

  // Ensure paths are absolute
  const componentConfigPath = path.resolve(options.componentRegistryPath);
  const pluginConfigPath = path.resolve(options.pluginRegistryPath);

  console.log(`[Teskooano UI Plugin] Initialized with:
    Component Config: ${componentConfigPath}
    Plugin Config:    ${pluginConfigPath}`);

  return {
    name: 'vite-plugin-teskooano-ui',

    // Tell Vite how to resolve our virtual module ID
    resolveId(id) {
      if (id === VIRTUAL_MODULE_ID) {
        console.log(`[Teskooano UI Plugin] Resolving virtual module ID: ${id}`);
        return RESOLVED_VIRTUAL_MODULE_ID;
      }
      return null; // Let Vite handle other IDs
    },

    // Provide the content for our virtual module
    async load(id) {
      if (id === RESOLVED_VIRTUAL_MODULE_ID) {
        console.log(`[Teskooano UI Plugin] Loading virtual module: ${id}`);
        try {
          // Read and parse the configuration files
          // IMPORTANT: This assumes the config files export the config object directly
          // You might need dynamic import here if the config files are complex TS
          // For simplicity now, let's assume simple structure or pre-compilation

          // Read Component Config
          console.log(`  - Reading component config: ${componentConfigPath}`);
          const componentConfigModule = await import(componentConfigPath + `?t=${Date.now()}`); // Cache bust import
          const componentConfig: ComponentRegistryConfig = componentConfigModule.componentConfig;
          if (!componentConfig || typeof componentConfig !== 'object') {
            throw new Error(`Invalid export 'componentConfig' from ${componentConfigPath}`);
          }
          console.log(`  - Found ${Object.keys(componentConfig).length} components in config.`);

          // Read Plugin Config
          console.log(`  - Reading plugin config: ${pluginConfigPath}`);
           const pluginConfigModule = await import(pluginConfigPath + `?t=${Date.now()}`); // Cache bust import
          const pluginConfig: PluginRegistryConfig = pluginConfigModule.pluginConfig;
           if (!pluginConfig || typeof pluginConfig !== 'object') {
            throw new Error(`Invalid export 'pluginConfig' from ${pluginConfigPath}`);
          }
          console.log(`  - Found ${Object.keys(pluginConfig).length} plugins in config.`);

          // Generate the virtual module content
          let content = `// Generated by vite-plugin-teskooano-ui\n\n`;

          // Generate component loaders
          content += 'export const componentLoaders = {\n';
          for (const [tag, config] of Object.entries(componentConfig)) {
            // Explicitly type config here
            const loadConfig = config as ComponentLoadConfig;
            const resolvedCompPath = path.resolve(path.dirname(componentConfigPath), loadConfig.path).replace(/\\/g, '/');
            console.log(`    - Generating component loader for '${tag}': import('${resolvedCompPath}')`);
            content += `  ${JSON.stringify(tag)}: () => import('${resolvedCompPath}'),\n`;
          }
          content += '};\n\n';

          // Generate plugin loaders
          content += 'export const pluginLoaders = {\n';
          for (const [id, config] of Object.entries(pluginConfig)) {
            // Explicitly type config here
            const loadConfig = config as PluginLoadConfig;
            const resolvedPluginPath = path.resolve(path.dirname(pluginConfigPath), loadConfig.path).replace(/\\/g, '/');
            console.log(`    - Generating plugin loader for '${id}': import('${resolvedPluginPath}')`);
            content += `  ${JSON.stringify(id)}: () => import('${resolvedPluginPath}'),\n`;
          }
          content += '};\n';

          console.log(`[Teskooano UI Plugin] Generated virtual module content.`);
          // console.log(content); // Debug: log generated content
          return content;

        } catch (error) {
          console.error('[Teskooano UI Plugin] Error loading configuration or generating virtual module:', error);
          // Provide an empty module or throw to indicate failure
          return 'export const componentLoaders = {};\nexport const pluginLoaders = {};\n';
        }
      }
      return null; // Let Vite handle other IDs
    },
  };
} 